openapi: 3.0.0
info:
  title: Hypepperony Api
  description: An Api for an artistic festival
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://none.yet.io
  description: SwaggerHub API auto Mocking
tags:
- name: artistic event
  description: Artistic events available
- name: user
  description: Operations about user
- name: performer
  description: Performer or company
- name: seminar
  description: seminars of artistic events
paths:
  /artistic_event/{title}:
    get:
      tags:
      - artistic event
      summary: Find a single artistic event by title
      operationId: getArtisticEventByTitle
      parameters:
      - name: title
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: Mostra Leonardo
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artistic_event'
        400:
          description: Invalid Artistic event title
        404:
          description: Title not found
      x-swagger-router-controller: ArtisticEvent
    post:
      tags:
      - artistic event
      summary: Updates an artistic event by title
      operationId: updateEventByTitle
      parameters:
      - name: title
        in: path
        description: title of artistic event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        400:
          description: Invalid artistic event title
        404:
          description: Title not found
        405:
          description: Invalid input
      x-swagger-router-controller: ArtisticEvent
  /artistic_event/{type}:
    get:
      tags:
      - artistic event
      summary: Returns multiple artistic events by type
      operationId: getArtisticEventByType
      parameters:
      - name: Limit
        in: query
        description: maximum number of artistic events returned
        required: false
        style: form
        explode: true
        schema:
          maximum: 10
          minimum: 1
          type: integer
          example: 7
      - name: type
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: Opera
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artistic_event'
                x-content-type: application/json
        400:
          description: Invalid type
        404:
          description: type not found
      x-swagger-router-controller: ArtisticEvent
    post:
      tags:
      - artistic event
      summary: Updates an artistic event by type
      operationId: updateEventByType
      parameters:
      - name: type
        in: path
        description: type of artistic event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_1'
      responses:
        400:
          description: Invalid evnt type
        404:
          description: type not found
        405:
          description: Invalid input
      x-swagger-router-controller: ArtisticEvent
  /artistic_event/findByData/{data}:
    get:
      tags:
      - artistic event
      description: Returns multiple book
      operationId: getEventByData
      parameters:
      - name: Limit
        in: query
        description: maximum number of books returned
        required: false
        style: form
        explode: true
        schema:
          maximum: 10
          minimum: 1
          type: integer
          example: 7
      - name: data
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 05/05/2019
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/Artistic_event'
                  - $ref: '#/components/schemas/Seminar'
                x-content-type: application/json
        400:
          description: Invalid data
        404:
          description: data not found
      x-swagger-router-controller: ArtisticEvent
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: To create a user account.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        400:
          description: Invalid username/password supplied
      x-swagger-router-controller: User
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
      x-swagger-router-controller: User
  /performers:
    get:
      tags:
      - performer
      description: Returns all the performers
      operationId: getAllPerformers
      parameters:
      - name: Limit
        in: query
        description: maximum number of performers returned
        required: false
        style: form
        explode: true
        schema:
          maximum: 10
          minimum: 1
          type: integer
          example: 7
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Performer'
                x-content-type: application/json
      x-swagger-router-controller: Performer
  /seminaries:
    get:
      tags:
      - seminar
      description: Returns all the seminaries
      operationId: getAllSeminaries
      parameters:
      - name: Limit
        in: query
        description: maximum number of seminaries returned
        required: false
        style: form
        explode: true
        schema:
          maximum: 10
          minimum: 1
          type: integer
          example: 7
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seminar'
                x-content-type: application/json
      x-swagger-router-controller: Seminar
  /artistic_events:
    get:
      tags:
      - artistic event
      description: Returns all the artistic events
      operationId: getAllArtisticEvents
      parameters:
      - name: Limit
        in: query
        description: maximum number of artistic evrnts returned
        required: false
        style: form
        explode: true
        schema:
          maximum: 10
          minimum: 1
          type: integer
          example: 7
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artistic_event'
                x-content-type: application/json
      x-swagger-router-controller: ArtisticEvent
components:
  schemas:
    Artistic_event:
      title: Artistic_event
      required:
      - performer
      - title
      type: object
      properties:
        title:
          type: string
          example: Romeo and Juliet
        date:
          type: string
          example: 4th May 2019
        abstract:
          type: string
          example: The tragic story of two lovers
        performer:
          $ref: '#/components/schemas/Performer'
        seminar:
          $ref: '#/components/schemas/Seminar'
        Photo gallery:
          type: array
          items:
            $ref: '#/components/schemas/Artistic_event_Photo gallery'
        available:
          type: string
          description: event availability
          enum:
          - available
          - out of stock
        type:
          type: string
          description: the typology of the event
          enum:
          - Music
          - Theater
          - Opera
          - Dance performances
      description: An artistic event in this festival
      example:
        date: 4th May 2019
        performer:
          Details: A great dancer
          name: Bolle
          Photo gallery:
          - url: www.mangiami.org
          - url: www.mangiami.org
          artistic event:
          - null
          - null
        seminar:
          data: 5 5 2018
          location: hall 2
          title: the theme of love
        Photo gallery:
        - null
        - null
        available: available
        abstract: The tragic story of two lovers
        title: Romeo and Juliet
        type: Music
    Performer:
      title: Performer
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Bolle
        Photo gallery:
          type: array
          items:
            $ref: '#/components/schemas/Artistic_event_Photo gallery'
        Details:
          type: string
          example: A great dancer
        artistic event:
          type: array
          items:
            $ref: '#/components/schemas/Artistic_event'
      description: An artist or a company
      example:
        Details: A great dancer
        name: Bolle
        Photo gallery:
        - url: www.mangiami.org
        - url: www.mangiami.org
        artistic event:
        - null
        - null
      oneOf:
      - $ref: '#/components/schemas/Artist'
      - $ref: '#/components/schemas/Company'
    Artist:
      title: Artist
      required:
      - name
      type: object
      properties:
        current_affiliation:
          $ref: '#/components/schemas/Artistic_event'
        main_achievements:
          type: string
          example: Winner of Something and Something Else festivals
      description: a single artist
    Company:
      title: Company
      required:
      - name
      type: object
      properties:
        company_members:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
      description: an artistic company
    Seminar:
      title: Seminar
      required:
      - data
      - location
      - title
      type: object
      properties:
        title:
          type: string
          example: the theme of love
        data:
          $ref: '#/components/schemas/Seminar_data'
        location:
          type: string
          example: hall 2
      description: a seminar on an artistic event
      example:
        data: 5 5 2018
        location: hall 2
        title: the theme of love
    User:
      title: User
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Pippo
        password:
          type: string
      description: A user of the website
      example:
        password: password
        name: Pippo
        id: 0
    body:
      type: object
      properties:
        title:
          type: string
          description: Updated title of the artistic event
    body_1:
      type: object
      properties:
        title:
          type: string
          description: Updated title of the book
    Artistic_event_Photo gallery:
      type: object
      properties:
        url:
          type: string
          example: www.mangiami.org
      example:
        url: www.mangiami.org
    Seminar_data:
      type: object
      properties:
        day:
          type: integer
        mounth:
          type: integer
        year:
          type: integer
      example: 5 5 2018
